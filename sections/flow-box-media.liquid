{{ 'flow-box-media.css' | asset_url | stylesheet_tag }}
{%- style -%}
  #shopify-section-{{ section.id }}  {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    background-color: {{ section.settings.background_color }};
  }

  #shopify-section-{{ section.id }} .flow-box-media__grid {
    gap: {{ section.settings.gap }}px;
  }

  @media screen and (min-width: 750px) {
    #shopify-section-{{ section.id }} {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  assign total_blocks = section.blocks.size
  assign items_per_row_desktop = section.settings.items_per_row_desktop
  assign items_per_row_mobile = section.settings.items_per_row_mobile
  assign show_more_needed = false

  if total_blocks > items_per_row_desktop
    assign show_more_needed = true
  endif
-%}

<div class="flow-box-media section section--{{ section.settings.content_width }}" data-section-id="{{ section.id }}">
  <div
    class="flow-box-media__grid"
    data-items-per-row-desktop="{{ items_per_row_desktop }}"
    data-items-per-row-mobile="{{ items_per_row_mobile }}"
    data-total-blocks="{{ total_blocks }}"
  >
    {%- for block in section.blocks -%}
      <div
        class="flow-box-media__item flow-box-media__item--group"
        data-block-index="{{ forloop.index }}"
        {{ block.shopify_attributes }}
      >
        {% render block %}
      </div>
    {%- endfor -%}
  </div>

  {%- if show_more_needed -%}
    <div class="flow-box-media__show-more-wrapper">
      <button
        class="flow-box-media__show-more"
        data-show-more-section="{{ section.id }}"
        data-show-text="{{ section.settings.show_more_text }}"
        data-hide-text="{{ section.settings.show_less_text }}"
      >
        <span class="flow-box-media__show-more-text">{{ section.settings.show_more_text }}</span>
        <svg class="flow-box-media__show-more-icon" width="12" height="8" viewBox="0 0 12 8" fill="none">
          <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
        </svg>
      </button>
    </div>
  {%- endif -%}
</div>

{% render 'image-gallery-modal' %}

<script>
  if (!window.flowBoxMediaInitialized) {
    window.flowBoxMediaInitialized = true;

    document.addEventListener('DOMContentLoaded', function () {
      function initFlowBoxMedia() {
        const sections = document.querySelectorAll('.flow-box-media');

        sections.forEach((section) => {
          const grid = section.querySelector('.flow-box-media__grid');
          if (!grid) return;

          const totalBlocks = parseInt(grid.getAttribute('data-total-blocks'));
          const itemsPerRowDesktop = parseInt(grid.getAttribute('data-items-per-row-desktop'));
          const itemsPerRowMobile = parseInt(grid.getAttribute('data-items-per-row-mobile'));

          const actualItemsDesktop = Math.min(totalBlocks, itemsPerRowDesktop);
          const actualItemsMobile = Math.min(totalBlocks, itemsPerRowMobile);

          grid.style.setProperty('--items-per-row-desktop', actualItemsDesktop);
          grid.style.setProperty('--items-per-row-mobile', actualItemsMobile);

          const isMobile = window.innerWidth <= 749;
          const initialVisibleItems = isMobile ? actualItemsMobile : actualItemsDesktop;
          section.setAttribute('data-visible-items', initialVisibleItems);
        });
      }

      const showMoreButtons = document.querySelectorAll('.flow-box-media__show-more');

      showMoreButtons.forEach((button) => {
        button.addEventListener('click', function (e) {
          e.preventDefault();
          e.stopPropagation(); // 阻止事件冒泡,防止触发图片弹框

          const sectionId = this.getAttribute('data-show-more-section');
          const section = document.querySelector(`[data-section-id="${sectionId}"]`);
          const grid = section.querySelector('.flow-box-media__grid');
          const showText = this.getAttribute('data-show-text') || 'Show More';
          const hideText = this.getAttribute('data-hide-text') || 'Show Less';

          const totalBlocks = parseInt(grid.getAttribute('data-total-blocks'));
          const itemsPerRowDesktop = parseInt(grid.getAttribute('data-items-per-row-desktop'));
          const itemsPerRowMobile = parseInt(grid.getAttribute('data-items-per-row-mobile'));

          const isMobile = window.innerWidth <= 749;
          const itemsPerRow = isMobile ? itemsPerRowMobile : itemsPerRowDesktop;
          const currentVisibleItems = parseInt(section.getAttribute('data-visible-items')) || itemsPerRow;

          if (section.classList.contains('is-fully-expanded')) {
            section.classList.remove('is-fully-expanded');
            section.setAttribute('data-visible-items', itemsPerRow);
            this.querySelector('.flow-box-media__show-more-text').textContent = showText;
          } else {
            const nextVisibleItems = Math.min(currentVisibleItems + itemsPerRow, totalBlocks);
            section.setAttribute('data-visible-items', nextVisibleItems);

            if (nextVisibleItems >= totalBlocks) {
              section.classList.add('is-fully-expanded');
              this.querySelector('.flow-box-media__show-more-text').textContent = hideText;
            }
          }
        });
      });

      // modal点击事件
      document.addEventListener('click', function (e) {
        // 排除点击在 Show More 按钮、链接等交互元素上
        if (e.target.closest('.flow-box-media__show-more, .flow-box-media__link, a, button')) {
          return;
        }

        const mediaItem = e.target.closest('.flow-box-media__group-item');
        if (!mediaItem) return;

        e.preventDefault();

        //  JSON 数据
        let jsonScript = mediaItem.querySelector('.gallery-images-data');

        if (!jsonScript) {
          const parentGroup = mediaItem.parentElement;
          if (parentGroup) {
            jsonScript = parentGroup.querySelector('.gallery-images-data');
          }
        }

        if (!jsonScript) {
          console.warn('Gallery images data not found');
          return;
        }

        try {
          const imagesData = JSON.parse(jsonScript.textContent);

          if (window.openImageGallery && typeof window.openImageGallery === 'function') {
            window.openImageGallery(imagesData);
          } else {
            console.warn('openImageGallery function not found');
          }
        } catch (error) {
          console.error('Failed to parse gallery images data:', error);
        }
      });

      window.addEventListener('resize', function () {
        const sections = document.querySelectorAll('.flow-box-media');
        sections.forEach((section) => {
          const grid = section.querySelector('.flow-box-media__grid');
          if (!grid) return;

          const totalBlocks = parseInt(grid.getAttribute('data-total-blocks'));
          const itemsPerRowDesktop = parseInt(grid.getAttribute('data-items-per-row-desktop'));
          const itemsPerRowMobile = parseInt(grid.getAttribute('data-items-per-row-mobile'));

          const isMobile = window.innerWidth <= 749;
          const itemsPerRow = isMobile ? itemsPerRowMobile : itemsPerRowDesktop;

          section.classList.remove('is-fully-expanded');
          section.setAttribute('data-visible-items', itemsPerRow);

          const button = section.querySelector('.flow-box-media__show-more');
          if (button) {
            const showText = button.getAttribute('data-show-text') || 'Show More';
            button.querySelector('.flow-box-media__show-more-text').textContent = showText;
          }
        });
      });

      initFlowBoxMedia();
    });
  }
</script>

{% schema %}
{
  "name": "Flow Box Media",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Layout Settings"
    },
    {
      "type": "range",
      "id": "items_per_row_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Items Per Row (Desktop)",
      "default": 4,
      "info": "Items will auto-adjust width based on total number of blocks"
    },
    {
      "type": "range",
      "id": "items_per_row_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Items Per Row (Mobile)",
      "default": 2
    },
    {
      "type": "range",
      "id": "gap",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap Between Items",
      "default": 8
    },
    {
      "type": "header",
      "content": "Show More Settings"
    },
    {
      "type": "text",
      "id": "show_more_text",
      "label": "Show More Text",
      "default": "Show More"
    },
    {
      "type": "text",
      "id": "show_less_text",
      "label": "Show Less Text",
      "default": "Show Less"
    },
    {
      "type": "header",
      "content": "Content Width"
    },
    {
      "type": "select",
      "id": "content_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "page-width",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:settings.top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:settings.bottom",
      "default": 36
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color"
    }
  ],
  "blocks": [
    {
      "type": "_media-flow-group"
    }
  ],
  "presets": [
    {
      "name": "Flow Box Media",
      "blocks": []
    }
  ]
}
{% endschema %}
